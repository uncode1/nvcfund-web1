def process_bank_transfer():
    """Process a bank transfer form submission"""
    # Ensure user is authenticated
    if not current_user.is_authenticated:
        flash('Please log in to access this page', 'warning')
        return redirect(url_for('web.main.login', next=request.path))
    
    # Get the form data
    form = BankTransferForm()
    
    # First attempt to save form data for possible recovery
    transaction_id = request.form.get('transaction_id')
    if transaction_id:
        # Ensure the transaction_id is set in the form
        form.transaction_id.data = transaction_id
        try:
            # Create a dictionary of form data
            form_data = {}
            for field_name in dir(form):
                if field_name.startswith('_') or field_name == 'meta':
                    continue
                    
                field = getattr(form, field_name)
                if hasattr(field, 'data'):
                    # Convert to string for all data types to ensure JSON compatibility
                    form_data[field_name] = str(field.data) if field.data is not None else None
            
            # Save form data
            user_id = current_user.id
            FormData.create_from_form(user_id, transaction_id, 'bank_transfer', form_data)
            db.session.commit()
            logger.info(f"Saved bank transfer form data for transaction {transaction_id}")
        except Exception as e:
            db.session.rollback()
            logger.error(f"Error saving form data: {str(e)}")
    
    # Begin form validation
    if form.validate_on_submit():
        # Get the transaction from the database
        user_id = current_user.id
        transaction = Transaction.query.filter_by(transaction_id=transaction_id, user_id=user_id).first()
        
        if not transaction:
            flash('Transaction not found or you do not have permission to access it', 'danger')
            return redirect(url_for('web.main.dashboard'))
        
        # Make sure the transaction is for NVC Global and in an appropriate state
        if not transaction.gateway or transaction.gateway.name != 'NVC Global' or transaction.status not in [TransactionStatus.PENDING, TransactionStatus.PROCESSING]:
            flash('This transaction cannot be processed as a bank transfer', 'danger')
            return redirect(url_for('web.main.transaction_details', transaction_id=transaction_id))
            
        try:
            # Update transaction metadata with enhanced bank details
            bank_details = {
                'recipient': {
                    'name': form.recipient_name.data,
                    'email': form.recipient_email.data,
                    'address': form.recipient_address.data,
                    'city': form.recipient_city.data,
                    'state': form.recipient_state.data,
                    'zip': form.recipient_zip.data,
                    'country': form.recipient_country.data,
                    'phone': form.recipient_phone.data,
                    'tax_id': form.recipient_tax_id.data,
                    'institution_type': form.recipient_institution_type.data,
                    'relationship': form.recipient_relationship.data
                },
                'bank': {
                    'name': form.bank_name.data,
                    'account_number': form.account_number.data,
                    'account_type': form.account_type.data,
                    'account_holder': form.account_holder.data,
                    'transfer_type': form.transfer_type.data,
                    'address': form.bank_address.data,
                    'city': form.bank_city.data,
                    'state': form.bank_state.data,
                    'country': form.bank_country.data,
                    'branch_name': form.bank_branch_name.data,
                    'branch_code': form.bank_branch_code.data
                },
                'reference': form.reference.data,
                'invoice_number': form.invoice_number.data,
                'payment_note': form.description.data,
                'notes_to_recipient': form.notes_to_recipient.data,
                'notes_to_bank': form.notes_to_bank.data,
                'compliance': {
                    'source_of_funds': form.source_of_funds.data,
                    'source_of_funds_detail': form.source_of_funds_detail.data,
                    'compliance_agree': form.compliance_agree.data
                },
                'settlement': {
                    'method': form.settlement_method.data,
                    'charge_bearer': form.charge_bearer.data
                }
            }
            
            # Add routing or SWIFT code based on transfer type
            if form.transfer_type.data == 'domestic':
                bank_details['bank']['routing_number'] = form.routing_number.data
            else:
                bank_details['bank']['swift_bic'] = form.swift_bic.data
                bank_details['bank']['iban'] = form.iban.data
                bank_details['international'] = {
                    'currency': form.currency.data,
                    'purpose': form.purpose.data,
                    'purpose_detail': form.purpose_detail.data if form.purpose.data == 'other' else None,
                    'intermediary_bank': form.intermediary_bank.data,
                    'intermediary_swift': form.intermediary_swift.data
                }
            
            # Update transaction with bank transfer details
            if transaction.tx_metadata_json:
                try:
                    metadata = json.loads(transaction.tx_metadata_json)
                    metadata['bank_transfer'] = bank_details
                    transaction.tx_metadata_json = json.dumps(metadata)
                except json.JSONDecodeError:
                    # If existing metadata is invalid, create new
                    transaction.tx_metadata_json = json.dumps({'bank_transfer': bank_details})
            else:
                transaction.tx_metadata_json = json.dumps({'bank_transfer': bank_details})
            
            # Also store some recipient info in dedicated fields for better query performance
            transaction.recipient_name = form.recipient_name.data
            transaction.recipient_institution = form.bank_name.data
            transaction.recipient_account = form.account_number.data
            transaction.recipient_address = form.bank_address.data
            transaction.recipient_country = form.bank_country.data
            
            # Update transaction status to PROCESSING
            transaction.status = TransactionStatus.PROCESSING
            transaction.updated_at = datetime.utcnow()
            
            db.session.commit()
            
            # Get the gateway handler for this transaction
            gateway_handler = payment_gateways.get_gateway_handler(transaction.gateway_id)
            if not gateway_handler:
                flash('Unable to process this payment: payment gateway not found', 'danger')
                return redirect(url_for('web.main.transaction_details', transaction_id=transaction_id))
            
            # Process the bank transfer
            try:
                result = gateway_handler.process_bank_transfer(transaction, bank_details)
                if result.get('success'):
                    flash('Bank transfer initiated successfully. You will be notified when the transfer is completed.', 'success')
                    return redirect(url_for('web.main.transaction_details', transaction_id=transaction_id))
                else:
                    error_message = result.get('error', 'Unknown error')
                    flash(f'Bank transfer failed: {error_message}', 'danger')
                    return redirect(url_for('web.main.transaction_details', transaction_id=transaction_id))
            except Exception as e:
                db.session.rollback()
                flash(f'Error processing bank transfer: {str(e)}', 'danger')
                logger.error(f"Error processing bank transfer: {str(e)}")
                return redirect(url_for('web.main.transaction_details', transaction_id=transaction_id))
                
        except Exception as e:
            db.session.rollback()
            flash(f'Error updating transaction: {str(e)}', 'danger')
            logger.error(f"Error updating transaction: {str(e)}")
            return redirect(url_for('web.main.transaction_details', transaction_id=transaction_id))
    else:
        if request.method == 'POST':
            # Handle form validation errors
            error_messages = []
            for field, errors in form.errors.items():
                field_label = getattr(form, field).label.text if hasattr(getattr(form, field), 'label') else field
                error_messages.append(f"{field_label}: {', '.join(errors)}")
            
            error_message = "<br>".join(error_messages)
            flash(f'Form validation failed:<br>{error_message}', 'danger')
    
    # If form validation fails or method is GET, try to load saved form data
    if transaction_id:
        try:
            form_data = FormData.get_latest_form_data(current_user.id, transaction_id, 'bank_transfer')
            if form_data and form_data.form_data:
                form.populate_from_stored_data(form_data.form_data)
        except Exception as e:
            logger.error(f"Error loading saved form data: {str(e)}")
    
    # Get transaction information for the form
    if transaction_id:
        transaction = Transaction.query.filter_by(transaction_id=transaction_id).first()
        if transaction and transaction.user_id == current_user.id:
            amount = transaction.amount
            description = transaction.description
            date = transaction.created_at.strftime('%Y-%m-%d %H:%M:%S')
            return render_template('bank_transfer_form.html', form=form, transaction_id=transaction_id, amount=amount, description=description, date=date)
    
    # Fallback to dashboard if no transaction_id or transaction not found
    flash('Transaction not found', 'danger')
    return redirect(url_for('web.main.dashboard'))